# Copyright 2021 Amazon.com, Inc. or its affiliates
# All Rights Reserved
import logging
import pytest

from raff.burst.burst_super_simulated_mode_helper import super_simulated_mode
from raff.burst.burst_super_simulated_mode_helper import get_burst_conn_params
from raff.burst.burst_write import BurstWriteTest
from raff.common.db.session import DbSession
from raff.common.dimensions import Dimensions
from raff.common.db.redshift_db import RedshiftDb

log = logging.getLogger(__name__)
__all__ = [super_simulated_mode]


class BurstWriteIdentityColumnGUCBase(BurstWriteTest):
    def _setup_tables(self, cursor):
        diststyle = 'diststyle even'
        sortkey = 'compound sortkey(c0, c1)'
        tbl_def_burst = (
            "create table dp20365_tbl_burst(c0 int, c1 bigint identity(0, 1),"
            "c2 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL) {} {}")
        cursor.execute(tbl_def_burst.format(diststyle, sortkey))

    def _try_burst_write_on_identity_table(self, cluster, cursor, table,
                                           guc_enable):
        basic_insert = ("insert into {}(c0, c2) values(0, default);")
        # Try to burst write on the table with id cols
        cursor.execute("set query_group to burst;")
        cursor.execute(basic_insert.format(table))
        if guc_enable:
            self._check_last_query_bursted(cluster, cursor)
        else:
            self._check_last_query_didnt_burst_with_code(cluster, cursor, 52)

@pytest.mark.serial_only
@pytest.mark.localhost_only
@pytest.mark.skip_load_data
@pytest.mark.super_simulated_mode
@pytest.mark.usefixtures("super_simulated_mode")
@pytest.mark.custom_burst_gucs(gucs={'burst_enable_write_id_col':'false'})
@pytest.mark.custom_local_gucs(gucs={'burst_enable_write_id_col':'false'})
class TestBurstWriteIdentityColumnGUC0(BurstWriteIdentityColumnGUCBase):
    def test_burst_write_on_id_col_disable(self, cluster):
        """
        Test: burst write on identity col should not succeed when GUC is set to
              false.
        """
        db_session = DbSession(cluster.get_conn_params(user='master'))
        with db_session.cursor() as cursor:
            cursor.execute("set query_group to burst;")
            self._setup_tables(cursor)
            self._start_and_wait_for_refresh(cluster)
            self._try_burst_write_on_identity_table(
                cluster, cursor, "dp20365_tbl_burst", False)
